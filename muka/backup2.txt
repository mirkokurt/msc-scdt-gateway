package main

import (
	"errors"
	"fmt"
	"strings"
	"time"
	"os"

    "github.com/godbus/dbus"
	"github.com/muka/go-bluetooth/hw"
	"github.com/muka/go-bluetooth/api"
	"github.com/muka/go-bluetooth/bluez/profile/adapter"
	"github.com/muka/go-bluetooth/bluez/profile/agent"
	"github.com/muka/go-bluetooth/bluez/profile/device"
	"github.com/muka/go-bluetooth/bluez/profile/advertising"
	//"github.com/muka/go-bluetooth/api/service"
	//"github.com/muka/go-bluetooth/bluez/profile/gatt"
	log "github.com/sirupsen/logrus"
)

func main()  {

	hwaddr := "5C:78:B6:30:DF:B9"
	adapterID := "hci0"
	
	var prop advertising.LEAdvertisement1Properties
	prop.Appearance = 512
	prop.Discoverable = false
	prop.DiscoverableTimeout = 0
	prop.Duration = 60
	prop.LocalName = "ContactsGateway"
	b := []uint8{1, 2, 3, 4, 5, 6, 7}
	prop.AddManifacturerData(2467, b)
	prop.Timeout = 60
	prop.Type = "broadcast"
	
	log.Infof("Prop is \n", prop)
	
	cancel, err := api.ExposeAdvertisement(adapterID, &prop, 60)
	if err != nil {
		log.Infof("Error is %v\n", err)
		return
	}
	defer cancel()
	
	
	/*
	advert, _ := api.NewAdvertisement(adapterID, nil)
	
	prop := advert.GetProperties()
	prop := FromMap()
	
	b := []uint8{1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
	prop.AddManifacturerData(2467, b)
	
	log.Infof("Prop is %v\n", prop)
	
	log.Infof("Advert is %v\n", advert)
	
	cancel, err := api.ExposeAdvertisement(adapterID, &prop, 10000000)
	if err != nil {
		log.Infof("Error is %v\n", err)
		return
	}
	defer cancel()
	*/

	/*
	options := service.AppOptions{
		AdapterID:  adapterID,
		AgentCaps:  agent.CapNoInputNoOutput,
		UUIDSuffix: "-0000-1000-8000-00805F9B34FB",
		UUID:       "1234",
	}

	ap, err := service.NewApp(options)
	if err != nil {
		return
	}
	defer ap.Close()

	ap.SetName("go_bluetooth")
	
	timeout := uint32(6 * 3600) // 6h
	log.Infof("Advertising for %ds...", timeout)
	cancel, err := ap.Advertise(timeout)
	if err != nil {
		return
	}

	defer cancel()
	*/
	
	/*
	advert, err := advertising.NewLEAdvertisement1("/hci0/path/advertisement0")
	if err != nil {
		log.Infof("Error is %v\n", err)
		return
	}
	p, _ := advert.GetProperties()
	log.Infof("Standard prop is \n", p)
	
	
	var advert advertising.LEAdvertisement1 
	ciao, _ := advert.GetLocalName()
	log.Infof("Advert is %v\n", ciao)
	
	//arrayData := make(map[string]interface{})
	//b := []byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
	//arrayData["2467"] = b

	//advert.SetManufacturerData(arrayData)
	
	advManager,_ := advertising.NewLEAdvertisingManager1FromAdapterID("hci0")
	advManager.RegisterAdvertisement(advert.Path(), nil)
	*/
	
	log.SetLevel(log.TraceLevel)

	btmgmt := hw.NewBtMgmt(adapterID)
	if len(os.Getenv("DOCKER")) > 0 {
		btmgmt.BinPath = "./bin/docker-btmgmt"
	}

	// set LE mode
	btmgmt.SetPowered(false)
	btmgmt.SetLe(true)
	btmgmt.SetBredr(false)
	btmgmt.SetPowered(true)
	
	log.Infof("Discovering %s on %s", hwaddr, adapterID)

	a, err := adapter.NewAdapter1FromAdapterID(adapterID)
	if err != nil {
		return
	}

	//Connect DBus System bus
	conn, err := dbus.SystemBus()
	if err != nil {
		return
	}

	// do not reuse agent0 from service
	agent.NextAgentPath()

	ag := agent.NewSimpleAgent()
	//ag.SetPassCode("123456")
	ag.SetPassKey(123456)
	err = agent.ExposeAgent(conn, ag, agent.CapNoInputNoOutput, true)
	if err != nil {
		return
	}

	dev, err := findDevice(a, hwaddr)
	if err != nil {
		return
	}

	watchProps, err := dev.WatchProperties()
	if err != nil {
		return
	}
	log.Infof("<<<<<<<<<<Start watch properties !")
	go func() {
		for propUpdate := range watchProps {
			log.Debugf("--> updated %s=%v", propUpdate.Name, propUpdate.Value)
		}
	}()

	err = connect(dev, ag, adapterID)
	if err != nil {
		return
	}
	
	log.Infof("Before retrieve services")
	retrieveServices(a, dev)

	select {}
	// return
}

func findDevice(a *adapter.Adapter1, hwaddr string) (*device.Device1, error) {
	//
	// devices, err := a.GetDevices()
	// if err != nil {
	// 	return nil, err
	// }
	//
	// for _, dev := range devices {
	// 	devProps, err := dev.GetProperties()
	// 	if err != nil {
	// 		log.Errorf("Failed to load dev props: %s", err)
	// 		continue
	// 	}
	//
	// 	log.Info(devProps.Address)
	// 	if devProps.Address != hwaddr {
	// 		continue
	// 	}
	//
	// 	log.Infof("Found cached device Connected=%t Trusted=%t Paired=%t", devProps.Connected, devProps.Trusted, devProps.Paired)
	// 	return dev, nil
	// }

	dev, err := discover(a, hwaddr)
	if err != nil {
		return nil, err
	}
	if dev == nil {
		return nil, errors.New("Device not found, is it advertising?")
	}

	return dev, nil
}

func discover(a *adapter.Adapter1, hwaddr string) (*device.Device1, error) {

	err := a.FlushDevices()
	if err != nil {
		return nil, err
	}

	discovery, cancel, err := api.Discover(a, nil)
	if err != nil {
		return nil, err
	}

	defer cancel()

	for ev := range discovery {

		dev, err := device.NewDevice1(ev.Path)
		if err != nil {
			return nil, err
		}

		if dev == nil || dev.Properties == nil {
			continue
		}

		p := dev.Properties

		n := p.Alias
		if p.Name != "" {
			n = p.Name
		}
		log.Debugf("Discovered (%s) %s", n, p.Address)

		if p.Address != hwaddr {
			continue
		}

		return dev, nil
	}

	return nil, nil
}

func connect(dev *device.Device1, ag *agent.SimpleAgent, adapterID string) error {

	props, err := dev.GetProperties()
	if err != nil {
		return fmt.Errorf("Failed to load props: %s", err)
	}

	log.Infof("Found device name=%s addr=%s rssi=%d", props.Name, props.Address, props.RSSI)

	if props.Connected {
		log.Info("Device is connected")
		return nil
	}

	if !props.Paired || !props.Trusted {
		log.Info("Pairing device")

		err := dev.Pair()
		if err != nil {
			return fmt.Errorf("Pair failed: %s", err)
		}

		log.Info("Pair succeed, connecting...")
		agent.SetTrusted(adapterID, dev.Path())
	}

	if !props.Connected {
		log.Info("Connecting device")
		err = dev.Connect()
		if err != nil {
			if !strings.Contains(err.Error(), "Connection refused") {
				return fmt.Errorf("Connect failed: %s", err)
			}
		}
	}

	return nil
}

func retrieveServices(a *adapter.Adapter1, dev *device.Device1) error {

	log.Info("Listing exposed services")

	list, err := dev.GetAllServicesAndUUID()
	if err != nil {
		return err
	}
	
	//log.Info("Result %v\n", list)

	if len(list) == 0 {
		time.Sleep(time.Second * 2)
		
		return retrieveServices(a, dev)
	}

	for _, servicePath := range list {
		log.Info("%s", servicePath)
	}

	return nil
}

// Expose to bluez an advertisment instance via the adapter advertisement manager
func ExposeAdvertisementCustom(adapterID string, props *advertising.LEAdvertisement1Properties, discoverableTimeout uint32) (func(), error) {
	log.Infof("Start \n")
	log.Tracef("Retrieving adapter instance %s", adapterID)
	a, err := api.GetAdapter(adapterID)
	if err != nil {
		return nil, err
	}
	log.Infof("Here 1 \n")
	adv, err := api.NewAdvertisement(adapterID, props)
	if err != nil {
		return nil, err
	}

	log.Infof("Here 2 \n")
	err = api.ExposeDBusService(adv)
	if err != nil {
		return nil, err
	}

	log.Infof("Here 3 \n")
	log.Debug("Setup adapter")
	err = a.SetDiscoverable(true)
	if err != nil {
		return nil, err
	}

	log.Infof("Here 4 \n")
	err = a.SetDiscoverableTimeout(discoverableTimeout)
	if err != nil {
		return nil, err
	}
	
	log.Infof("Here 5 \n")
	err = a.SetPowered(true)
	if err != nil {
		return nil, err
	}

	log.Infof("Here 6 \n")
	log.Trace("Registering LEAdvertisement1 instance")
	advManager, err := advertising.NewLEAdvertisingManager1FromAdapterID(adapterID)
	if err != nil {
		return nil, err
	}

	log.Infof("Here 7 \n")
	err = advManager.RegisterAdvertisement(adv.Path(), map[string]interface{}{})
	if err != nil {
		return nil, err
	}
	log.Infof("Here 8 \n")
	cancel := func() {
		err := advManager.UnregisterAdvertisement(adv.Path())
		if err != nil {
			log.Warn(err)
		}
		err = a.SetProperty("Discoverable", false)
		if err != nil {
			log.Warn(err)
		}
	}

	return cancel, nil
}

